[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "py_plate"
dynamic = ["version"]
description = "A modern Python CLI template with best practices"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["cli", "template", "typer"]
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "typer[all]>=0.12.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pre-commit>=3.0.0",
    "ruff>=0.6.0",
    "mypy>=1.5.0",
]

[project.urls]
Documentation = "https://github.com/GRodolphe/py_plate#readme"
Issues = "https://github.com/GRodolphe/py_plate/issues"
Source = "https://github.com/GRodolphe/py_plate"

[project.scripts]
py_plate = "py_plate.cli:app"

[tool.hatch.version]
path = "src/py_plate/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/py_plate"]

[tool.ruff]
target-version = "py39"
line-length = 88
fix = true
show-fixes = true

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint]
preview = true
select = [
    "A",     # flake8-builtins
    "ARG",   # flake8-unused-arguments
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "E",     # pycodestyle errors
    "F",     # Pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "PL",    # Pylint
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "T20",   # flake8-print
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
]
ignore = [
    "E501",   # line too long, handled by black
    "S101",   # use of assert
    "PLR0913", # too many arguments
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "PLR2004"]

[tool.ruff.lint.isort]
known-first-party = ["py_plate"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-config",
    "--strict-markers",
    "--cov=py_plate",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["py_plate"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_reexport = true
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
